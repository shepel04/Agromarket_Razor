@model IEnumerable<Agromarket.Models.Order>
@using Agromarket.Models

@{
    ViewData["Title"] = "Список замовлень";

    var ordersByStatus = Model
        .Where(o => o.OrderItems.All(i => !i.IsPreorder))
        .GroupBy(o => o.Status)
        .ToDictionary(g => g.Key, g => g.ToList());

    var preorderOrdersByStatus = Model
        .Where(o => o.OrderItems.Any(i => i.IsPreorder))
        .GroupBy(o => o.Status)
        .ToDictionary(g => g.Key, g => g.ToList());
}

<h2 class="mb-4">Список замовлень</h2>

@if (TempData["StatusError"] != null)
{
    <div id="statusErrorAlert" class="alert alert-danger alert-dismissible fade show" role="alert">
        <i class="bi bi-exclamation-triangle-fill me-2"></i>
        @Html.Raw(TempData["StatusError"])
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Закрити"></button>
    </div>
}

<!-- Вкладки -->
<ul class="nav nav-tabs mb-3" id="orderStatusTabs" role="tablist">
    @foreach (var status in Enum.GetValues(typeof(OrderStatus)).Cast<OrderStatus>())
    {
        var isActive = status == OrderStatus.Виконується ? "active" : "";
        <li class="nav-item" role="presentation">
            <button class="nav-link @isActive" id="tab-@status" data-bs-toggle="tab" data-bs-target="#panel-@status" type="button" role="tab">
                @status
            </button>
        </li>
    }

    @foreach (var status in Enum.GetValues(typeof(OrderStatus)).Cast<OrderStatus>())
    {
        <li class="nav-item" role="presentation">
            <button class="nav-link" id="tab-preorder-@status" data-bs-toggle="tab" data-bs-target="#panel-preorder-@status" type="button" role="tab">
                Передзамовлення - @status
            </button>
        </li>
    }
</ul>

<!-- Контент вкладок -->
<div class="tab-content">
    @foreach (var status in Enum.GetValues(typeof(OrderStatus)).Cast<OrderStatus>())
    {
        var isActive = status == OrderStatus.Виконується ? "show active" : "";
        var orders = ordersByStatus.ContainsKey(status) ? ordersByStatus[status] : new List<Order>();

        <div class="tab-pane fade @isActive" id="panel-@status" role="tabpanel">
            @if (!orders.Any())
            {
                <div class="alert alert-info">Немає звичайних замовлень зі статусом <strong>@status</strong>.</div>
            }
            else
            {
                <partial name="_OrderTablePartial" model="orders" />
            }
        </div>
    }

    @foreach (var status in Enum.GetValues(typeof(OrderStatus)).Cast<OrderStatus>())
    {
        var orders = preorderOrdersByStatus.ContainsKey(status) ? preorderOrdersByStatus[status] : new List<Order>();

        <div class="tab-pane fade" id="panel-preorder-@status" role="tabpanel">
            @if (!orders.Any())
            {
                <div class="alert alert-info">Немає передзамовлень зі статусом <strong>@status</strong>.</div>
            }
            else
            {
                <partial name="_OrderTablePartial" model="orders" />
            }
        </div>
    }
</div>

@section Scripts {
    <script>
        async function toggleOrderDetails(orderId) {
            const row = document.getElementById(`order-details-${orderId}`);
            const content = document.getElementById(`details-content-${orderId}`);

            if (!row.classList.contains("d-none")) {
                row.classList.add("d-none");
                return;
            }

            row.classList.remove("d-none");

            try {
                const response = await fetch(`/Order/GetOrderDetails/${orderId}`);
                if (response.ok) {
                    const data = await response.text();
                    content.innerHTML = data;
                } else {
                    content.innerHTML = "<p class='text-danger'>Помилка завантаження деталей.</p>";
                }
            } catch (error) {
                console.error("Помилка:", error);
                content.innerHTML = "<p class='text-danger'>Не вдалося отримати дані.</p>";
            }
        }

        async function deleteOrder(orderId) {
            if (!confirm("Ви впевнені, що хочете видалити це замовлення?")) return;

            try {
                const response = await fetch(`/Order/DeleteOrder/${orderId}`, {
                    method: "DELETE",
                    headers: { "Content-Type": "application/json" }
                });

                if (response.ok) {
                    document.getElementById(`order-${orderId}`).remove();
                } else {
                    alert("Не вдалося видалити замовлення.");
                }
            } catch (error) {
                console.error("Помилка при видаленні:", error);
            }
        }

        setTimeout(function () {
            const alert = document.getElementById("statusErrorAlert");
            if (alert) {
                const bsAlert = bootstrap.Alert.getOrCreateInstance(alert);
                bsAlert.close();
            }
        }, 5000);
    </script>
}
