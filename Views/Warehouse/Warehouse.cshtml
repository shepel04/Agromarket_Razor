@model IEnumerable<Agromarket.Models.WarehouseEntry>

@{
    ViewData["Title"] = "Складський облік";
    var serializedProducts = Json.Serialize(ViewBag.Products);
}

<h2 class="mb-4">Складський облік</h2>
<div id="liveAlertPlaceholder"></div>


<button class="btn btn-primary mb-3" id="openAddStockModal">➕ Додати товар на склад</button>

<table class="table table-bordered table-striped align-middle text-center">
    <thead class="table-light">
    <tr>
        <th>Назва</th>
        <th>Кількість</th>
        <th>Ціна закупівлі</th>
        <th>Ціна продажу</th>
        <th>Дата надходження</th>
        <th>Строк придатності</th>
        <th>Залишок</th>
        <th>Дії</th>
        <th>Передзамовлення</th>
        <th>Управління</th>
        <th>Акції</th>
    </tr>
    </thead>
    <tbody>
    @foreach (var entry in Model)
    {
        double? daysLeft = entry.ExpirationDate?.Subtract(DateTime.UtcNow).TotalDays;
        string shelfColor = daysLeft == null ? "text-muted" :
            daysLeft <= 0 ? "text-danger" :
            daysLeft <= 14 ? "text-warning" : "text-success";

        <tr>
            <td>@entry.Product.Name</td>
            <td>@entry.Quantity</td>
            <td>@entry.PurchasePrice.ToString("0.00") грн</td>
            <td>
                @(entry.SellingPrice?.ToString("0.00") ?? "-") грн
                @if (entry.HasDiscount && entry.DiscountedPrice.HasValue)
                {
                    <div>
                        <span class="badge bg-warning text-dark">Знижка: @entry.DiscountPercent% → @entry.DiscountedPrice грн</span>
                    </div>
                }
            </td>
            <td>@entry.ReceivedDate.ToShortDateString()</td>
            <td>@entry.ShelfLifeWeeks тиж.</td>
            <td>
                <span class="@shelfColor">
                    @if (entry.ExpirationDate == null)
                    {
                        <text>—</text>
                    }
                    else if (daysLeft > 0)
                    {
                        <text>@((int)daysLeft) дн.</text>
                    }
                    else
                    {
                        <text>Закінчився</text>
                    }
                </span>
            </td>
            <td>
                @if (entry.Quantity > 0)
                {
                    <form asp-controller="Warehouse" asp-action="DeductStock" method="post" class="d-flex gap-1 justify-content-center">
                        @Html.AntiForgeryToken()
                        <input type="hidden" name="entryId" value="@entry.Id" />
                        <input type="number" name="quantity" class="form-control form-control-sm w-50 text-center" min="1" max="@entry.Quantity" required />
                        <button type="submit" class="btn btn-sm btn-danger">Списати</button>
                    </form>
                }
                else
                {
                    <span class="text-muted">—</span>
                }
            </td>
            <td class="text-center align-middle">
                <input type="checkbox"
                       class="form-check-input preorder-toggle"
                       data-entry-id="@entry.Id"
                       @(entry.IsAvailableForPreorder ? "checked" : "") />
            </td>
            
            <td>
                <form asp-controller="Warehouse" asp-action="DeleteEntry" method="post" onsubmit="return confirm('Ви дійсно хочете видалити надходження?')">
                    @Html.AntiForgeryToken()
                    <input type="hidden" name="entryId" value="@entry.Id" />
                    <button type="submit"
                            class="btn btn-sm btn-outline-secondary"
                            @(entry.Quantity > 0 ? "disabled title='Не можна видалити: товар ще є на складі'" : "")>
                        🗑️
                    </button>
                </form>
                @if (entry.Quantity == 0)
                {
                    <button type="button" class="btn btn-sm btn-outline-primary mt-2" data-bs-toggle="modal" data-bs-target="#receiveToExistingModal-@entry.Id">
                        ➕ Поповнити
                    </button>
                    <div class="modal fade" id="receiveToExistingModal-@entry.Id" tabindex="-1" aria-labelledby="receiveToExistingModalLabel-@entry.Id" aria-hidden="true">
                        <div class="modal-dialog">
                            <div class="modal-content">
                                <form asp-controller="Warehouse" asp-action="ReceiveToExisting" method="post">
                                    @Html.AntiForgeryToken()
                                    <div class="modal-header">
                                        <h5 class="modal-title">Поповнення надходження: @entry.Product.Name</h5>
                                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Закрити"></button>
                                    </div>
                                    <div class="modal-body">
                                        <input type="hidden" name="entryId" value="@entry.Id" />
                                        <div class="mb-3">
                                            <label class="form-label">Кількість</label>
                                            <input type="number" name="quantity" class="form-control" min="1" required />
                                        </div>
                                        <div class="mb-3">
                                            <label class="form-label">Новий строк придатності (в тижнях)</label>
                                            <input type="number" name="shelfLifeWeeks" class="form-control" min="1" required />
                                        </div>
                                    </div>
                                    <div class="modal-footer">
                                        <button type="submit" class="btn btn-success">Зберегти</button>
                                    </div>
                                </form>
                            </div>
                        </div>
                    </div>
                }
            </td>
            <td>
                <button type="button"
                        class="btn btn-sm btn-outline-warning mt-2"
                        data-bs-toggle="modal"
                        data-bs-target="#discountModal-@entry.Id">
                    💸 Знижка
                </button>
            </td>
            <div class="modal fade" id="discountModal-@entry.Id" tabindex="-1" aria-labelledby="discountModalLabel-@entry.Id" aria-hidden="true">
                <div class="modal-dialog">
                    <div class="modal-content">
                        <form asp-controller="Warehouse" asp-action="ApplyDiscount" method="post">
                            @Html.AntiForgeryToken()
                            <input type="hidden" name="entryId" value="@entry.Id" />
                            <div class="modal-header bg-warning">
                                <h5 class="modal-title text-dark">Застосувати знижку для @entry.Product.Name</h5>
                                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Закрити"></button>
                            </div>
                            <div class="modal-body">
                                <div class="mb-3">
                                    <label class="form-label">Відсоток знижки (%)</label>
                                    <input type="number" class="form-control" name="discountPercent" min="1" max="100" required value="@entry.DiscountPercent?.ToString("0")" />
                                </div>
                                <div class="mb-3">
                                    <label class="form-label">Початок дії</label>
                                    <input type="date" class="form-control" name="discountStartDate" value="@entry.DiscountStartDate?.ToString("yyyy-MM-dd")" />
                                </div>
                                <div class="mb-3">
                                    <label class="form-label">Кінець дії</label>
                                    <input type="date" class="form-control" name="discountEndDate" value="@entry.DiscountEndDate?.ToString("yyyy-MM-dd")" />
                                </div>
                            </div>
                            <div class="modal-footer">
                                <button type="submit" class="btn btn-success">💾 Застосувати</button>
                            </div>
                        </form>
                    </div>
                </div>
            </div>

        </tr>
    }
    </tbody>
</table>



<div class="modal fade" id="newReceiptModal" tabindex="-1" aria-labelledby="newReceiptModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-xl modal-dialog-scrollable">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Додати надходження</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Закрити"></button>
            </div>
            <form asp-controller="Warehouse" asp-action="ReceiveMultipleStock" method="post">
                <div class="modal-body">
                    <table class="table table-bordered align-middle text-center">
                        <thead class="table-light">
                        <tr>
                            <th class="w-30">Товар</th>
                            <th class="w-10">Кількість</th>
                            <th class="w-15">Ціна закупівлі</th>
                            <th class="w-15">Ціна продажу</th>
                            <th class="w-10">Строк (тижні)</th>
                            <th class="w-5">Дії</th>
                        </tr>
                        </thead>
                        <tbody id="stockTableBody">
                        </tbody>
                    </table>
                    <div class="d-flex justify-content-end">
                        <button type="button" class="btn btn-outline-secondary" id="addStockItem">➕ Додати рядок</button>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="submit" class="btn btn-success">💾 Зберегти</button>
                </div>
            </form>
        </div>
    </div>
</div>

<style>
    .w-5 { width: 5%; }
    .w-10 { width: 10%; }
    .w-15 { width: 15%; }
    .w-30 { width: 30%; }
</style>

<script>
    const products = @Html.Raw(serializedProducts);

    document.addEventListener("DOMContentLoaded", function () {
        const stockModal = new bootstrap.Modal(document.getElementById('newReceiptModal'));
        const openBtn = document.getElementById("openAddStockModal");
        const stockTableBody = document.getElementById("stockTableBody");
        const addBtn = document.getElementById("addStockItem");

        openBtn?.addEventListener("click", () => stockModal.show());

        addBtn.addEventListener("click", function () {
            const index = stockTableBody.querySelectorAll("tr").length;

            const selectOptions = products.map(p => `<option value="${p.id}">${p.name}</option>`).join('');

            const newRow = document.createElement("tr");
            newRow.classList.add("stock-item");
            newRow.innerHTML = `
                <td><select name="entries[${index}].ProductId" class="form-select">${selectOptions}</select></td>
                <td><input type="number" name="entries[${index}].Quantity" class="form-control text-center" min="1" required /></td>
                <td><input type="number" step="0.01" name="entries[${index}].PurchasePrice" class="form-control text-end" required /></td>
                <td><input type="number" step="0.01" name="entries[${index}].SellingPrice" class="form-control text-end" /></td>
                <td><input type="number" name="entries[${index}].ShelfLifeWeeks" class="form-control text-center" min="1" required /></td>
                <td><button type="button" class="btn btn-outline-danger btn-sm remove-item">🗑</button></td>
            `;

            stockTableBody.appendChild(newRow);
        });

        stockTableBody.addEventListener("click", function (e) {
            if (e.target.classList.contains("remove-item")) {
                e.target.closest("tr")?.remove();
                updateIndexes();
            }
        });

        function updateIndexes() {
            const rows = stockTableBody.querySelectorAll("tr");
            rows.forEach((row, idx) => {
                row.querySelectorAll("select, input").forEach(input => {
                    const name = input.getAttribute("name");
                    if (name) {
                        const updated = name.replace(/entries\[\d+\]/, `entries[${idx}]`);
                        input.setAttribute("name", updated);
                    }
                });
            });
        }

        addBtn.click();
    });

    document.addEventListener("DOMContentLoaded", function () {
        document.querySelectorAll('.preorder-toggle').forEach(function (checkbox) {
            checkbox.addEventListener('change', function () {
                const entryId = this.dataset.entryId;
                const isAvailableForPreorder = this.checked;

                const formData = new FormData();
                formData.append('entryId', entryId);
                formData.append('isAvailableForPreorder', isAvailableForPreorder);

                // Отримуємо токен
                const tokenInput = document.querySelector('input[name="__RequestVerificationToken"]');
                if (tokenInput) {
                    formData.append('__RequestVerificationToken', tokenInput.value);
                }

                fetch('/Warehouse/TogglePreorder', {
                    method: 'POST',
                    body: formData
                })
                    .then(response => {
                        if (!response.ok) throw new Error('Network error');
                        return response.json();
                    })
                    .then(data => {
                        if (data.success) {
                            showAlert('Статус передзамовлення оновлено успішно.', 'success');
                        } else {
                            showAlert('Помилка при оновленні статусу.', 'danger');
                        }
                    })
                    .catch(error => {
                        console.error('Error:', error);
                        showAlert('Помилка з\'єднання із сервером.', 'danger');
                    });
            });
        });

        function showAlert(message, type) {
            const alertPlaceholder = document.getElementById('liveAlertPlaceholder');
            const wrapper = document.createElement('div');
            wrapper.innerHTML = `
            <div class="alert alert-${type} alert-dismissible fade show mt-3" role="alert">
                ${message}
                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Закрити"></button>
            </div>
        `;
            alertPlaceholder.append(wrapper);

            // Автоматично закривати через 5 секунд
            setTimeout(() => {
                const alert = bootstrap.Alert.getOrCreateInstance(wrapper.querySelector('.alert'));
                alert.close();
            }, 5000);
        }
    });
</script>
